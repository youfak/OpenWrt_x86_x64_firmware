name: 编译OpenWrt固件

on:
  workflow_dispatch:
    inputs:
      config_file:
        description: '要使用的配置文件 (5.10.config/5.15.config)'
        required: true
        default: '5.10.config'
      ssh:
        description: '是否开启SSH调试'
        required: false
        default: 'false'
      upload_cowtransfer:
        description: '是否上传到奶牛快传'
        required: false
        default: 'false'
      upload_wetransfer:
        description: '是否上传到WeTransfer'
        required: false
        default: 'false'
      create_release:
        description: '是否创建Release发布页'
        required: false
        default: 'true'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: ${{ github.event.inputs.upload_cowtransfer }}
  UPLOAD_WETRANSFER: ${{ github.event.inputs.upload_wetransfer }}
  UPLOAD_RELEASE: ${{ github.event.inputs.create_release }}
  TZ: Asia/Shanghai
  DIY_P1_SH: diy5.10.sh
  DIY_P2_SH: diy-part2.sh

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: 初始化环境
        run: |
          echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "FILE_TIME=$(date +"%Y年%m月%d日-%H点%M分")" >> $GITHUB_ENV
      
      - name: 显示磁盘空间 (优化前)
        run: |
          echo "优化前的磁盘空间"
          echo "=================================================="
          df -hT
          echo "=================================================="
          
      - name: 磁盘空间优化 (第一阶段)
        uses: hugoalh/disk-space-optimizer-ghaction@v0.8.1
        with:
          operate_sudo: "True"
          general_include: ".+"
          general_exclude: |-
            ^GCC$
            ^G\+\+$
            Clang
            LLVM
          docker_include: ".+"
          docker_prune: "True"
          docker_clean: "True"
          apt_prune: "True"
          apt_clean: "True"
          homebrew_prune: "True"
          homebrew_clean: "True"
          npm_prune: "True"
          npm_clean: "True"
          os_swap: "True"

      - name: 磁盘空间优化 (第二阶段)
        uses: easimon/maximize-build-space@master
        with: 
          root-reserve-mb: 2048
          swap-size-mb: 1
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: 显示磁盘空间 (优化后)
        run: |
          echo "优化后的磁盘空间"
          echo "=================================================="
          df -hT
          echo "=================================================="
          
      - name: 安装编译依赖
        run: |
          sudo apt update
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
            gettext git libncurses-dev libssl-dev python3-distutils rsync unzip zlib1g-dev \
            file wget
          sudo apt install -y libelf-dev
          
      - name: 下载OpenWrt源码
        run: |
          git clone $REPO_URL openwrt
      
      - name: 加载自定义设置
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: 更新软件包
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: 更改设置
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH
          
      - name: 复制自定义配置文件
        run: |
          cp ${{ github.event.inputs.config_file }} openwrt/.config
          
      - name: 运行DIY脚本
        run: |
          if [ "${{ github.event.inputs.config_file }}" = "5.10.config" ]; then
            cp diy5.10.sh openwrt/diy.sh
          elif [ "${{ github.event.inputs.config_file }}" = "5.15.config" ]; then
            cp diy5.15.sh openwrt/diy.sh
          fi
          cd openwrt
          chmod +x diy.sh
          ./diy.sh
          
      - name: 配置环境变量以增加编译内存
        run: |
          echo "FORCE_UNSAFE_CONFIGURE=1" >> $GITHUB_ENV
          echo "=== 进一步优化磁盘空间 ==="
          sudo -E swapoff -a
          sudo -E rm -f /swapfile
          sudo -E docker image prune -a -f
          sudo -E snap set system refresh.retain=2
          sudo -E apt-get -y purge azure* dotnet* firefox ghc* google* llvm* mono* mysql* openjdk* php* zulu*
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost
          
      - name: 开启SSH连接 (如果选择)
        uses: mxschmitt/action-tmate@v3
        if: github.event.inputs.ssh == 'true'
        
      - name: 下载软件包
        run: |
          cd openwrt
          make defconfig
          make download -j8
          
      - name: 编译固件 (尝试多线程)
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) 线程编译中..."
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
        continue-on-error: true
        
      - name: 编译固件 (单线程 - 如果多线程失败)
        id: compile_fallback
        if: steps.compile.outputs.status != 'success'
        run: |
          cd openwrt
          echo -e "单线程编译中..."
          make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          
      - name: 上传bin目录
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin_${{ github.event.inputs.config_file }}_${{ env.FILE_DATE }}
          path: openwrt/bin/packages/x86_64

      - name: 整理编译好的固件
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages && mkdir packages
          find -name "*esxi-flat.vmdk*" | xargs -i mv -f {} packages
          find -name "*kernel.bin*" | xargs -i mv -f {} packages
          find -name "*rootfs*" | xargs -i mv -f {} packages
          find -name "*.manifest*" | xargs -i mv -f {} packages
          find -name "*vmlinuz*" | xargs -i mv -f {} packages
          find -name "*esxi.vmdk*" | xargs -i mv -f {} packages
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
          echo "固件已整理完成:"
          ls -la

      - name: 上传固件到github
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_${{ github.event.inputs.config_file }}_${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: 上传固件到奶牛快传
        id: cowtransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
          echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      - name: 上传固件到WeTransfer
        id: wetransfer
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

      - name: 创建release发布页
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "固件信息: OpenWrt ${{ github.event.inputs.config_file }} 版本" >> release.txt
          echo "编译时间: ${{ env.FILE_TIME }}" >> release.txt
          echo "固件功能: 支持IPv4/IPv6双栈、多WAN接入、iStore应用商店等" >> release.txt
          echo "[固件源码](https://github.com/coolsnowwolf/lede)" >> release.txt
          echo "由衷感谢所有为OpenWrt无私奉献的大佬们" >> release.txt
          echo "📥 固件下载" >> release.txt
          [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 发布至Release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ env.FILE_TIME }} 「 OpenWrt-${{ github.event.inputs.config_file }} 」
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: 清理旧的workflow
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 0
          keep_minimum_runs: 2

      - name: 删除旧的Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 20
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 